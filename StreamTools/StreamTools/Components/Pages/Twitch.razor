@page "/twitch"
@using StreamTools.Components.Models
@using StreamTools.Components.Models.Enums
@using StreamTools.Services
@namespace StreamTools.Components.Pages


<MudContainer Fluid VerticalAlignment="VerticalAlignment.Middle" Flex="Flex.AlignContent.Center.JustifyContent.Center.Shrink.Is1">
    <MudTabs VerticalAlignment="VerticalAlignment.Top">
        <MudTabPanel Text="Account">
            <MudContainer Fluid VerticalAlignment="VerticalAlignment.Middle" Flex="Flex.AlignContent.Center.JustifyContent.Center.Shrink.Is1">
                <MudText> Connected to: @TwitchUserName</MudText>
            </MudContainer>
            <MudContainer Fluid VerticalAlignment="VerticalAlignment.Middle" Flex="Flex.AlignContent.Center.JustifyContent.Center.Shrink.Is1">
                @if(!_connected){
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@twitchConnectButton" Disabled="@_processing">
                    @if (_processing)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                        <MudText Class="ms-2">Processing</MudText>
                    }
                    else
                    {
                        <MudText>Connect Twitch</MudText>
                    }
                </MudButton>
                }
                else{
                    <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="@twitchDisconnect">Disconnect</MudButton>
                }
            </MudContainer>
        </MudTabPanel>
        <MudTabPanel Text="Cheers">
            <br />
            <MudContainer>
                <MudButton StartIcon="@Icons.Material.Filled.Add" Variant="Variant.Filled" Color="Color.Success" OnClick="CreateNewCheerRow" FullWidth="true">New</MudButton>
            </MudContainer>
            <br />
            <MudDataGrid Loading="@isLoading" @ref="mudDataGridCheer" T="Cheer" Items="@DataCheers" ReadOnly="false" EditMode="DataGridEditMode.Cell" EditTrigger="DataGridEditTrigger.OnRowClick" SortMode="SortMode.None">
                <Columns>
                    <PropertyColumn Property="x => x.Keyword" Required="false" />
                    <TemplateColumn>
                        <HeaderTemplate>
                            Shockers
                        </HeaderTemplate>
                        <CellTemplate>
                            <MudText>
                                @{
                                    var text = "";
                                    var value = context.Item.Shockers as List<Shocker> ?? [];

                                    if (!value.Any())
                                    {
                                    }
                                    if (value != null)
                                    {
                                        text = String.Join(", ", ((List<Shocker>)context.Item.Shockers).OrderBy(s => s.Name).Select(s => s.Name));
                                    }
                                    else
                                    {
                                        text = "Select shocker";

                                    }
                                    @text
                                }
                            </MudText>
                        </CellTemplate>
                        <EditTemplate>
                            <MudSelect T="Shocker" MultiSelection SelectedValues="@context.Item.Shockers.OrderBy(s => s.Name)" SelectedValuesChanged="(values) => OnShockerSelectItemsChanged(context.Item, values)" ToStringFunc="@((shocker) => shocker.Name)">
                                @foreach (Shocker shocker in TestShockers)
                                {
                                    <MudSelectItem Value="@shocker">@shocker.Name</MudSelectItem>
                                }
                            </MudSelect>
                        </EditTemplate>
                    </TemplateColumn>
                    <PropertyColumn Property="x => x.MinimumCheer" />
                    <TemplateColumn>
                        <HeaderTemplate>Operation method</HeaderTemplate>
                        <CellTemplate>
                            <MudText>@context.Item.Method.GetName()</MudText>
                        </CellTemplate>
                        <EditTemplate>
                            <MudSelect T="OperationMethod" @bind-Value="@context.Item.Method">
                                @foreach (OperationMethod method in Enum.GetValues(typeof(OperationMethod)))
                                {
                                    <MudSelectItem Value="method">@method.GetName()</MudSelectItem>
                                }
                            </MudSelect>
                        </EditTemplate>
                    </TemplateColumn>
                    <PropertyColumn Property="x => x.Intensity" />
                    <PropertyColumn Property="x => x.Duration" />
                    <PropertyColumn Property="x => x.Warning">
                        <EditTemplate>
                            <MudCheckBox @bind-Value="context.Item.Warning" />
                        </EditTemplate>
                    </PropertyColumn>
                </Columns>
            </MudDataGrid>
        </MudTabPanel>
        <MudTabPanel Text="Redeems">
            <br />
            <MudContainer>
                <MudButton StartIcon="@Icons.Material.Filled.Add" Variant="Variant.Filled" FullWidth="true" Color="Color.Success" OnClick="CreateNewRedeemRow">New</MudButton>
            </MudContainer>
            <br />
            <MudDataGrid Loading="@isLoading" @ref="mudDataGridRedeem"  T="Redeem" Items="@DataRedeems" ReadOnly="false" EditMode="DataGridEditMode.Cell" EditTrigger="DataGridEditTrigger.OnRowClick" SortMode="SortMode.None" CommittedItemChanges="RedeemComittedItemChanges">
                <Columns>
                    <PropertyColumn Property="x => x.Name" />
                    <PropertyColumn Property="x => x.Description" Required="false" />
                    <TemplateColumn>
                        <HeaderTemplate>
                            Shockers
                        </HeaderTemplate>
                        <CellTemplate>
                            <MudText>
                                @{
                                    var text = "";
                                    var value = context.Item.Shockers as List<Shocker> ?? [];

                                    if (!value.Any())
                                    {
                                    }
                                    if (value != null)
                                    {
                                        text = String.Join(", ", ((List<Shocker>)context.Item.Shockers).OrderBy(s => s.Name).Select(s => s.Name));
                                    }
                                    else
                                    {
                                        text = "Select shocker";

                                    }
                                    @text
                                }
                            </MudText>
                        </CellTemplate>
                        <EditTemplate>
                            <MudSelect T="Shocker" MultiSelection SelectedValues="@context.Item.Shockers.OrderBy(s => s.Name)" SelectedValuesChanged="(values) => OnShockerSelectItemsChanged(context.Item, values)" ToStringFunc="@((shocker) => shocker.Name)">
                                @foreach (Shocker shocker in TestShockers)
                                {
                                    <MudSelectItem Value="@shocker">@shocker.Name</MudSelectItem>
                                }
                            </MudSelect>
                        </EditTemplate>
                    </TemplateColumn>
                    <TemplateColumn>
                        <HeaderTemplate>Operation method</HeaderTemplate>
                        <CellTemplate>
                            <MudText>@context.Item.Method.GetName()</MudText>
                        </CellTemplate>
                        <EditTemplate>
                            <MudSelect T="OperationMethod" @bind-Value="@context.Item.Method">
                                @foreach (OperationMethod method in Enum.GetValues(typeof(OperationMethod)))
                                {
                                    <MudSelectItem Value="method">@method.GetName()</MudSelectItem>
                                }
                            </MudSelect>
                        </EditTemplate>
                    </TemplateColumn>
                    <PropertyColumn Property="x => x.Intensity" />
                    <PropertyColumn Property="x => x.Duration" />
                    <TemplateColumn>
                        <HeaderTemplate>
                            Warning
                        </HeaderTemplate>
                        <EditTemplate>
                            <MudCheckBox @bind-Value="context.Item.Warning" />
                        </EditTemplate>
                    </TemplateColumn>
                    <TemplateColumn>
                        <EditTemplate>
                            <MudButton Color="Color.Secondary" Variant="Variant.Filled" OnClick="() => DeleteRedeem(context.Item)">Delete</MudButton>
                        </EditTemplate>
                    </TemplateColumn>
                </Columns>
            </MudDataGrid>
        </MudTabPanel>
        <MudTabPanel Text="Subscription">

        </MudTabPanel>
        <MudTabPanel Text="Hypetrain">
            <MudSwitch @bind-Value="@settingsService.hypeTrainEnabled" Label="Hypetrain enabled"></MudSwitch>
            <MudSwitch @bind-Value="@settingsService.hypeTrainWarning" Label="Hypetrain vibration warning"></MudSwitch>
            <MudNumericField T="int" @bind-Value="@settingsService.hypeTrainIntensityPerLevel" Min="0" Max="100" Label="Hypetrain Intensity per level"></MudNumericField>
            <MudNumericField T="int" @bind-Value="@settingsService.hypeTrainDurationPerLevel" Min="0" Max="100" Label="Hypetrain Duration per level"></MudNumericField>
        </MudTabPanel>
    </MudTabs>
</MudContainer>