@page "/twitch"
@using StreamTools.Components.Models
@using StreamTools.Components.Models.Enums

<Container Fluid VerticalAlignment="VerticalAlignment.Middle" Flex="Flex.AlignContent.Center.JustifyContent.Center.Shrink.Is1">
	 <Pagination VerticalAlignment="VerticalAlignment.Top">
		 <PaginationItem Disabled="@isActive.First()" @onclick="Previous">
			 <PaginationLink>
				 <span aria-hidden="true">«</span>
			 </PaginationLink>
		 </PaginationItem>
		 <PaginationItem Active="@isActive[0]">
			 <PaginationLink Page="1" Clicked="SetActive">
				 Account
			 </PaginationLink>
		 </PaginationItem>
		 <PaginationItem Active="@isActive[1]">
			 <PaginationLink Page="2" Clicked="SetActive">
				 Cheers
			 </PaginationLink>
		 </PaginationItem>
		 <PaginationItem Active="@isActive[2]">
			 <PaginationLink Page="3" Clicked="SetActive">
				 Redeems
			 </PaginationLink>
		 </PaginationItem>
		 <PaginationItem Disabled="@isActive.Last()" @onclick="Next">
			 <PaginationLink>
				 <span aria-hidden="true">»</span>
			 </PaginationLink>
		 </PaginationItem>
	 </Pagination>
 </Container>
 <br />
 @if (!IsNotActive(0))
{
	<Container Fluid VerticalAlignment="VerticalAlignment.Middle" Flex="Flex.AlignContent.Center.JustifyContent.Center.Shrink.Is1">
		 <Paragraph> Connected to: %TWITCHNAME%</Paragraph>
	 </Container>
	<Container Fluix VerticalAlignment="VerticalAlignment.Middle" Flex="Flex.AlignContent.Center.JustifyContent.Center.Shrink.Is1">
		<Button Color="Color.Primary">Connect Twitch</Button>
	</Container>
}
@if (!IsNotActive(1))
{
	<Container Fluid VerticalAlignment="VerticalAlignment.Default" Flex="Flex.AlignContent.Center.JustifyContent.Center.Shrink.Is1">
		 <Paragraph>Cheers</Paragraph>
	 </Container>
	<DataGrid TItem="Cheer"
			  CommandMode="DataGridCommandMode.ButtonRow"
			Editable
			   EditMode="DataGridEditMode.Cell"
	        Data="@TestData">
		 <DataGridColumns>
			 <DataGridCommandColumn NewCommandAllowed="false" EditCommandAllowed="false" DeleteCommandAllowed="false" CancelCommandAllowed>
			 <SaveCommandTemplate>
				 <Button ElementId="btnSave" Type="ButtonType.Submit" PreventDefaultOnSubmit Color="Color.Primary" Clicked="@context.Clicked">@context.LocalizationString</Button>
					</SaveCommandTemplate>
					<CancelCommandTemplate>
						<Button ElementId="btnCancel" Color="Color.Secondary" Clicked="@context.Clicked">@context.LocalizationString</Button>
					</CancelCommandTemplate>
			 </DataGridCommandColumn>
				<DataGridColumn Field="@nameof(Cheer.Keyword)" Caption="Keyword" Editable />
			 <DataGridColumn Field="@nameof(Cheer.Shockers)" Caption="Shockers" Editable>
				<DisplayTemplate>
					@{
						var item = context as Cheer;
						<text>@string.Join(", ", item.Shockers)</text>
					}
				</DisplayTemplate>
			 </DataGridColumn>
			 <DataGridSelectColumn Field="@nameof(Cheer.Method)" Caption="Method" Editable />
			 <DataGridNumericColumn Field="@nameof(Cheer.MinimumCheer)" Caption="Minimum Cheer" Editable />
			 <DataGridNumericColumn Field="@nameof(Cheer.Intensity)" Caption="Intensity" Editable />
			 <DataGridNumericColumn Field="@nameof(Cheer.Duration)" Caption="Duration" Editable />
		 </DataGridColumns>
		 <ButtonRowTemplate>
			 <Button Color="Color.Success" Clicked="context.NewCommand.Clicked">New</Button>
			 <Button Color="Color.Primary" Clicked="context.EditCommand.Clicked">Edit</Button>
			 <Button Color="Color.Danger" Clicked="context.DeleteCommand.Clicked">Delete</Button>
			 <Button Color="Color.Link" Clicked="context.ClearFilterCommand.Clicked">Clear Filter</Button>
		 </ButtonRowTemplate>
	 </DataGrid>
}
@if (!IsNotActive(2))
{
	<Container Fluid VerticalAlignment="VerticalAlignment.Default" Flex="Flex.AlignContent.Center.JustifyContent.Center.Shrink.Is1">
		 <p>Redeems</p>
	 </Container>
}

@code {
	private bool[] isActive = { false, true, false };

	private void Previous()
	{
		if (isActive[0]) return;

		if (isActive[1])
		{
			SetActive("1");
			return;
		}
		if (isActive[2])
		{
			SetActive("2");
			return;
		}
	}

	private void Next()
	{
		if (isActive[0])
		{
			SetActive("2");
			return;
		}

		if (isActive[1])
		{
			SetActive("3");
			return;
		}

		if (isActive[2])
		{
			return;
		}
	}

	private void SetActive(string idx)
	{
		switch (idx)
		{
			case "1":
				isActive[0] = true;
				isActive[1] = false;
				isActive[2] = false;
				break;
			case "2":
				isActive[0] = false;
				isActive[1] = true;
				isActive[2] = false;
				break;
			case "3":
				isActive[0] = false;
				isActive[1] = false;
				isActive[2] = true;
				break;
			default:
				break;
		}
	}
	private bool IsNotActive(int id)
	{
		return !isActive[id];
	}

	public Dictionary<String, String> OperationsOptions = Enum.GetValues(typeof(OperationMethod)).Cast<OperationMethod>().ToDictionary(t => t.ToString(), t => t.ToString());
	public List<Cheer> TestData = new List<Cheer>
	{
		new("", [1,2], 100, OperationMethod.Vibrate, 69,10),
		new("shock", [1], 500, OperationMethod.Shock, 25, 1)
	};
}
